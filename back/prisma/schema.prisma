// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String          @unique
  password         String
  role             Role            @default(USER)
  tickets          Ticket[]        @relation("TicketsCreated")
  ticketMessages   TicketMessage[]
  assignedTickets  Ticket[]        @relation("AssignedTickets")
  //
  assignedProjects Project[]       @relation("AssignedProjects")
  createdProjects  Project[]       @relation("CreatedProjects")
}

model Ticket {
  id             Int             @id @default(autoincrement())
  subject        String
  description    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         TicketStatus    @default(OPEN)
  author         User            @relation(name: "TicketsCreated", fields: [authorId], references: [id])
  authorId       Int
  ticketMessages TicketMessage[]
  //
  assignedTo     User?           @relation(name: "AssignedTickets", fields: [assignedToId], references: [id])
  assignedToId   Int?
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      Int
  type           TicketType
  priority       Priority        @default(LOW)
}

model TicketMessage {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  Int
}

model Project {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  assignedUsers User[]   @relation("AssignedProjects")
  author        User     @relation(name: "CreatedProjects", fields: [authorId], references: [id])
  authorId      Int
  tickets       Ticket[]
  createdAt     DateTime @default(now()) //
}

enum Role {
  USER
  ADMIN
  MANAGER
  DEV
}

enum TicketStatus {
  OPEN
  INPROG
  PENDING
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TicketType {
  BUG
  ISSUE
  OTHER
  FEATURE_REQ
}
